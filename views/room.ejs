<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" name="viewport" content="width=device-width, initial-scale=1.0"/>

    <title>QuackChat</title>

    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/css/materialize.min.css">
    <link rel="manifest" href="manifest.json">

    <style media="screen">
      :root{
        --orange: #FFC680;
        --yellow: #FDD264;
        --tangerine: #F56B39;
        --bergundy: #670305;
        --green: #6AF53A;
        --red: #EB2A2A;
      }
      #quackchat{
        margin: 5px;
        height: 100%;
        background-color: var(--tangerine);
        padding: 10px;
        display: flex;
      }
      #members{
        height: 100%;
        background-color: var(--yellow);
        width: 30%;
        max-width: 380px;
        margin-top: 0px;
        padding-top: 15px;
        min-width: 300px;
        margin-right: 5px;
        overflow-y: scroll;
      }
      #chat{
        height: 100%;
        background-color: var(--yellow);
        width: 70%;
        margin-top: 0px;
        flex-grow: 100;
        position: relative;
      }
      #members h3{
        margin: 0px;
        margin-bottom: 10px;
        color: white;
      }
      li.member{
        padding-top: 10px;
        padding-bottom: 10px;
        padding-left: 15px;
        height: 70px;
        margin-bottom: 8px;
        background-color: var(--tangerine);
        color: white;
        margin-left: 4px;
        margin-right: 4px;
      }
      li p.member-username{
        font-size: 25px;
        margin: 0px;
        display: inline-block;
        position: relative;
        bottom: 5px;
      }
      li p.member-email{
        font-size: 18px;
        margin: 0px;
        position: relative;
        bottom: 12px;
      }
      li img.member-thumbnail{
        margin-right: 10px;
      }
      #members::-webkit-scrollbar { width: 4px; }
      #members::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px var(--tangerine); }
      #members::-webkit-scrollbar-thumb { background-color: var(--bergundy); }

      #message-box{
        position: absolute;
        bottom: 0;
        margin: 4px;
        height: 50px;
        border: none;
        background: var(--tangerine);
        padding: 5px;
        padding-left: 15px;
        color: white;
        font-size: 20px;
        z-index: 1;
      }
      #message-box:focus{
        outline: none;
      }

      ::-webkit-input-placeholder { color: white; font-size: 20px;}
      ::-moz-placeholder { color: white; font-size: 20px;}
      :-ms-input-placeholder { color: white; font-size: 20px;}
      :-moz-placeholder { color: white; font-size: 20px;}
      #messages{
        margin: 4px;
        color: white;
        overflow-y: scroll;
      }
      #messages::-webkit-scrollbar { width: 4px; }
      #messages::-webkit-scrollbar-track { -webkit-box-shadow: inset 0 0 6px var(--tangerine); }
      #messages::-webkit-scrollbar-thumb { background-color: var(--bergundy); }

      li{
        margin: 5px;
        margin-bottom: 20px;
        position: relative;
      }
      .thumbnail{
        width: 40px;
      }
      .message, .mine{
        word-wrap: break-word;
        padding: 5px;
      }
      .message .thumbnail{
        float: left;
        margin-right: 4px;
      }
      .mine{
        text-align: right;
      }
      .mine .thumbnail{
        float: right;
        margin-left: 4px;
      }
      .msg{
        background-color: var(--orange);
        font-size: 20px;
        padding: 5px;
        position: relative;
        top: -24px;
        margin: 0px;
        max-width: 80%;
        display: inline-block;
      }
      .mine .msg{
        right: 45px;
        text-align: left;
      }
      .username{
        font-size: 15px;
        position: relative;
        bottom: 4px;
        margin: 0px;
      }
      .message .msg{
        left: 45px;
      }
      .timestamp{
        font-size: 12px;
      }
      .mine .timestamp{
        margin-left: 5px;
      }
      .message .timestamp{
        margin-right: 5px;
      }
      .online{
        font-size: 20px;
        position: absolute;
        right: 8px;
        bottom: 1px;
      }
      #turn-on-notifi{
        background-color: var(--yellow);
      }
      a.modal-action{
        color: white;
        background-color: var(--tangerine);
      }
      div.modal-footer{
        background-color: var(--yellow) !important;
      }
    </style>
  </head>
  <body>
    <div id="quackchat" class="z-depth-1">
      <ul id="members" class="z-depth-1 hide-on-med-and-down">
        <h3 class="center-align">MEMBERS</h3>
      </ul>
      <div id="chat" class="z-depth-1">
        <ul id="messages"></ul>
        <input type="text" id="message-box" placeholder="Quack here" class="browser-default z-depth-1" autofocus>
      </div>
      <div id="turn-on-notifi" class="modal">
        <div class="modal-content">
          <h4>Hear out for Quacks!</h4>
          <p>Turn on notifications to never miss a Quack from a fellow Quacker!</p>
        </div>
        <div class="modal-footer">
          <a href="#!" class="modal-action modal-close waves-effect btn-flat">Turn 'em on!</a>
        </div>
      </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.2/js/materialize.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery.touchswipe/1.6.18/jquery.touchSwipe.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.0/socket.io.slim.js"></script>
    <script src="https://www.gstatic.com/firebasejs/4.12.1/firebase.js"></script>
    <script>

    </script>
    <script type="text/javascript">
      var socket = io.connect();
      var members = <%- JSON.stringify(members) %>
      var user = <%- JSON.stringify(user) %>
      var token;

      socket.emit('online', user._id);
      window.addEventListener('visibilitychange', () => {
        switch (document.visibilityState) {
          case 'visible':
            socket.emit('online', user._id);
            break;
          case 'hidden':
            socket.emit('offline', user._id);
            break;
        }
      })
      window.onbeforeunload = () => {
        socket.emit('offline', user._id);
        return null;
      }

      firebase.initializeApp({
        apiKey: "AIzaSyAnkUsz67OmDrDfmeudP7qzl7GOUf3fiH0",
        authDomain: "quackquack-quackchat.firebaseapp.com",
        databaseURL: "https://quackquack-quackchat.firebaseio.com",
        projectId: "quackquack-quackchat",
        storageBucket: "",
        messagingSenderId: "571642064077"
      });

      function escape(string){
        let newString = [];
        for(char of string){
               if (char === '&')  newString.push( '&amp;'  );
          else if (char === '<')  newString.push( '&lt;'   );
          else if (char === '>')  newString.push( '&gt;'   );
          else if (char === '"')  newString.push( '&quot;' );
          else if (char === "'")  newString.push( '&#x27'  );
          else if (char === '/')  newString.push( '&#x2F;' );
          else if (char === ' ')  newString.push( '&nbsp;' );
          else                    newString.push(   char   );
        }
        return newString.join('');
      }

      function diff(timestamp){
        let diff = +new Date() - timestamp;
             if    (diff < 1000*60)       return                'Now'                   ;
        else if   (diff < 1000*60*60)     return   Math.round(diff/(1000*60)) + 'm'     ;
        else if  (diff < 1000*60*60*24)   return  Math.round(diff/(1000*60*60)) + 'h'   ;
        else if (diff < 1000*60*60*24*07) return Math.round(diff/(1000*60*60*24)) + 'd' ;
        else {
          let a = new Date(timestamp);
          let months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];

          let year = a.getFullYear(),
              month = months[a.getMonth()],
              date = a.getDate(),
              hour = a.getHours(),
              min = a.getMinutes(),
              sec = a.getSeconds();

          return date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec;
        }
      }

      const messaging = firebase.messaging();

      function getAndSendToken(){
        messaging.requestPermission().then(async () => {
          token = await messaging.getToken();
          socket.emit('new-device', token);
        }).catch(err => getAndSendToken())
      }

      messaging.onTokenRefresh(async () => {
        let refreshed = await messaging.getToken();
        socket.emit('update-device', {
          old: token,
          new: refreshed
        })
        token = refreshed;
      })

      if (Notification.permission === 'default') {
        $('a.modal-action').click(() => {
          getAndSendToken();
        });
        setTimeout(() => {
          $('#turn-on-notifi').modal({
            dismissible: false
          });
          $('#turn-on-notifi').modal('open');
        }, 2500);
      }

      function you(member){
        return (member._id === user._id) ? 'You' : member.username;
      }

      for(member of members){
        $('#members').append(`
          <li id="${member._id}" class="member z-depth-1">
            <img src="${member.thumbnail}" alt="Member thumbnail" class="member-thumbnail left">
            <p class="text-flow member-username">${you(member)}</p>
            <span class="online">&#9632;</span>
              <br>
            <p class="text-flow member-email">${member.email.substring(0, member.email.indexOf('@'))}</p>
          </li>
        `);
        $(`#${member._id} .online`).css('color', (member.online) ? 'var(--green)' : 'var(--red)');
      }

      $.get('/messages', messages => {
        for(message of messages){
          let sender = members.find(o => o._id === message.sender);

          if (message.sender != user._id) {
            $('#messages').append(`
              <li class="message">
                <img src="${sender.thumbnail}" alt="Sender thumbnail" class="thumbnail"/>
                <p class="username">${sender.username} <span class="timestamp">${diff(message.timestamp)}</span></p>
                <br>
                <p class="msg z-depth-1">${escape(message.msg)}</p>
              </li>
            `);
          } else {
            $('#messages').append(`
              <li class="mine">
                <img src="${sender.thumbnail}" alt="Your thumbnail" class="thumbnail"/>
                <p class="username">You <span class="timestamp">${diff(message.timestamp)}</span></p>
                <br>
                <p class="msg z-depth-1">${escape(message.msg)}</p>
              </li>
            `);
          }
        }
        $('#messages').scrollTop($('#messages')[0].scrollHeight);
      })

      socket.on('message', data => {
        let sender = members.find(o => o._id === data.sender);
        $('#messages').append(`
          <li class="message">
            <img src="${sender.thumbnail}" alt="Sender thumbnail" class="thumbnail"/>
            <p class="username">${sender.username} <span class="timestamp">${diff(data.timestamp)}</span></p>
            <br>
            <p class="msg z-depth-1">${escape(data.msg)}</p>
          </li>
        `);
        $('#messages').scrollTop($('#messages')[0].scrollHeight);
      })

      $('input').keyup(function(e){
        if (e.key === "Enter") {
          if (/\S/.test($(this).val())) {
            let timestamp = + new Date();
            socket.emit('message', {
              msg: $(this).val(),
              sender: user._id,
              timestamp: timestamp
            });

            $('#messages').append(`
              <li class="mine">
                <img src="${user.thumbnail}" alt="Your thumbnail" class="thumbnail"/>
                <p class="username">You <span class="timestamp">${diff(timestamp)}</span></p>
                <br>
                <p class="msg z-depth-1">${escape($(this).val())}</p>
              </li>
            `);
            $('#messages').scrollTop($('#messages')[0].scrollHeight);

            $(this).val('');
          }
        }
      })

      socket.on('online', userID => $(`#${userID} .online`).css('color', 'var(--green)'));
      socket.on('offline', userID => $(`#${userID} .online`).css('color', 'var(--red)'));

      $('html').css('height', ($(window).height() - 10) + 'px');
      $('body').css('height', ($(window).height() - 10) + 'px');

      $('#chat').css('width', $('#members').width());

      $('#message-box').css('width', ($('#chat').width() - 8) + 'px');
      $('#messages').css('height', ($('#chat').height() - ($('#message-box').height() + 24)) + 'px');

      $(window).swipe({
        swipe: (event, direction, distance, duration, fingerCount) => {
          switch (direction) {
            case 'right':
              $('#members').removeClass('hide-on-med-and-down');
              $('#chat').addClass('hide-on-small-only');
              $('#message-box').css('width', ($('#chat').width() - 8) + 'px');
              if ($(window).width() < 600) {
                $('#members').css('margin-right', '0px');
                $('#members').css('max-width', '100%');
                $('#members').css('width', '100%');
              }
              $('#messages').scrollTop($('#messages')[0].scrollHeight);
              break;
            case 'left':
              $('#members').addClass('hide-on-med-and-down');
              $('#chat').removeClass('hide-on-small-only');
              $('#message-box').css('width', ($('#chat').width() - 8) + 'px');
              break;
          }
        }
      })
    </script>
  </body>
</html>
